package com.thephotogallery.admin.brand;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Rollback;

import com.thephotogallery.common.entity.Brand;
import com.thephotogallery.common.entity.Category;

@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@Rollback(false)
public class BrandRepositoryTests {
	
	@Autowired
	private BrandRepository repo;
	
	@Test
	public void testCreateBrand1() {
		Category fighters = new Category(6);
		Brand lockheed = new Brand("Lockheed");
		lockheed.getCategories().add(fighters);
		
		Brand savedBrand = repo.save(lockheed);
		
		assertThat(savedBrand).isNotNull();
		assertThat(savedBrand.getId()).isGreaterThan(0);
	}

	@Test
	public void testCreateBrand2() {
		Category B = new Category(4);
		Category fighters = new Category(6);
		
		Brand lockheed = new Brand("Lockheed");
		lockheed.getCategories().add(cos); 
		lockheed.getCategories().add(cos);
		
		Brand savedBrand = repo.save(lockheed);
		
		assertThat(savedBrand).isNotNull();
		assertThat(savedBrand.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testCreateBrand3() {
		Brand boeing = new Brand("Boeing");
		
		boeing.getCategories().add(new Category(29));
		boeing.getCategories().add(new Category(24));
		
		Brand savedBrand = repo.save(boeing);
		
		assertThat(savedBrand).isNotNull();
		assertThat(savedBrand.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testFindAll() {
		Iterable<Brand> brands = repo.findAll();
		brands.forEach(System.out::println);
		
		assertThat(brands).isNotEmpty();
	}
	
	@Test
	public void testGetById() {
		Brand brand = repo.findById(1).get();
		
		assertThat(brand.getName()).isEqualTo("Boeing");
	}
	
	@Test
	public void testUpdateName() {
		String newName = "Lockheed";
		Brand lockheed = repo.findById(3).get();
		lockheed.setName(newName);
		
		Brand savedBrand = repo.save(lockheed);
		assertThat(savedBrand.getName()).isEqualTo(newName);
	}
	
	@Test
	public void testDelete() {
		Integer id = 2;
		repo.deleteById(id);
		
		Optional<Brand> result = repo.findById(id);
		
		assertThat(result.isEmpty());
	}
}

	